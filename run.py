'''Markov generator code utilizes the Codecademy existing module
and incorporates my code. In the end, the output will go to an
html file and ouput the contents to the screen. These contents
are to be interpretted as song lyrics for the case of this 
application. Error handling has been include in the application
via the except method.

WRITTEN BY: Kathy Musiak
'''

from markov_python.cc_markov import MarkovChain
from fetch_data2 import fetch

def get_data():
	'''Ask the user for a website. Open the website and
	fetch the URL. Open the website and write the website
	data to a file called fetch_data2.txt and return the
	data that has been read to the file.'''
	
	url = str(raw_input("Please enter a website: "))
	if not (url) :
		print "That is not a valid website address."
		return
	else:
	    fetch(url)
	    with open("fetch_data2.txt", "r") as f1:
		    raw_data = f1.read()
	    return raw_data

def get_chain(text, num_words):
	
	#grab the text from the web. Data shouldn't contain HTML.

	#initialize the markov chain with text
	chain = MarkovChain()
	chain.add_string(text)
	
	#ask user for the number of words 
	
	
	#generate the markov chain using the number of words provided
	#by the user and the text from the website entered.
	chain_out = chain.generate_text(num_words)
	
	stripped_chain = format_chain(chain_out)
	return add_punct(stripped_chain)

def format_chain(chain):
	
	#This removes punctuation and numeric values from the markov chain and
    #returns it to get_chain
    yuck = """\,["]/'\'()&*~"""
       
    cleaned_chain = str(chain)
    for punct in yuck:
    #Removes punctuation from the chain
    	cleaned_chain = cleaned_chain.replace(punct, '')
    	
    for digit in '0123456789':
    #Removes digits from the chain
    	cleaned_chain = cleaned_chain.replace(digit, '')
    	
    cleaned_chain.replace('\'','') 
    	
    return cleaned_chain
    
def add_punct(chain):
	'''Capitalize the first word of the chain and
	add a period at the end.'''
	
	chain_grammar = chain.capitalize()
	chain_grammar = chain_grammar + '.'
	
	return chain_grammar
	
def num_song_lines():
	#Requests a number of song lines from the user and validates that the value is numeric
	try:
		song_lines = int(raw_input('How many lines in the song: '))
   
	except ValueError, e:
		print 'Wrong data type for song lines %s' % e
		exit()
	if song_lines < 1:
		print 'That is not a valid number of lines.'
		return
	else:
	    return song_lines

def generate_song(file_input):
	'''generate the entire song based on the number of lines
	that the users says they want generated by the Markov
	chain generator'''
	
	#how many words per line
	try:
	    words = int(raw_input('Please enter the number of words to generate per line: '))
	except ValueError, e:
		print '%s is not a valid integer.' % e
		exit()
	
	if words < 1:
		print 'Invalid Entry.'
		return False
	else:
	    num_lines = num_song_lines()
	    song = ''
	    for i in range(0,num_lines):
		    song = song + str(get_chain(file_input, words)) + '\n'
	    print song
	
web_input = get_data()
if web_input:
   generate_song(web_input)